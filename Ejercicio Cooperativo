/// Se debe crear una matriz con las siguientes palabras como se muestra a continuación. Luego de
/// eso debemos acomodar las palabras para que la primera letra "R" de cada una quede en la
/// posición 5, alineándose.
/// Para ello debemos primero leer todo el ejercicio y ponernos de acuerdo con el equipo en las
/// tareas que hará cada uno y en cómo llamemos a las variables y subprogramas necesarios.
/// Recordemos que todo lo tenemos que hacer con subprocesos o funciones.
/// El ejercicio será mucho más sencillo si establecemos las bases como equipo al principio.
/// Se necesita programar los siguientes subprogramas:
/// subprograma inicializarMatriz:
/// Debe recibir como parámetros la matriz a inicializar, la cantidad de filas y la cantidad de columnas.
/// En primera instancia inicializaremos la matriz con un "*" (asterisco) en cada lugar para que la
/// misma no esté vacía y no tengamos problemas.
/// subprograma imprimirMatriz:
/// Debe recibir como parámetros la matriz a imprimir, la cantidad de filas y la cantidad de columnas.
/// Para que veamos la matriz en la consola cuando lo necesitemos.
/// Tengamos en cuenta que para que no queden pegadas las letras vamos a imprimir un espacio, la
/// letra y otro espacio. Lo hacemos en imprimir para no modificar el contenido de la matriz.
/// Ambos subprogramas son similares al ejercicio 8 de la guía.
/// subprograma agregarPalabra:
/// Se le debe indicar en los parámetros la matriz donde se va a agregar la palabra, la fila en la que se
/// agregará y la propia palabra. Una vez el subprograma reciba eso debe descomponer la palabra y
/// agregarla a la matriz en la posición deseada.
/// Similar al ejercicio 12 de la guía.
/// subprograma buscarR:
/// Se le debe indicar la matriz donde se buscará la letra R y el número de fila en el que buscaremos.
/// Debe comparar cada letra de la fila indicada hasta que encuentre la primera letra ?R?. Ahí debe
/// devolvernos la posición de "R".
/// Nota: cuidado! debe devolver la posición de la primera R solamente.
/// Aquí podemos usar principios que usamos en el ejercicio 5
/// subprograma acomodarPalabra:
/// Se le debe indicar sólo la matriz en donde se acomodarán las palabras.
/// Ahora debemos crear una lógica que nos permita mover las palabras de las filas. Recordar que
/// podemos llamar a buscarR para saber cuántos espacios hay que mover las palabras.
/// Una vez que las palabras se muevan hay que llenar los espacios con asteriscos nuevamente: es
/// decir, si la palabra se mueve dos posiciones a la derecha hay que agregar dos asteriscos a la
/// izquierda de la fila.
/// Nota: ¡recuerden que la primera letra "R" debe quedar en la posición 5 de la matriz! Ya sabemos
/// en qué posición se encuentra "R" así que sólo debemos llevarla a la posición 5 corriendo toda la
/// palabra.

/// Algoritmo principal:
/// Debería quedarnos algo así
/// Algoritmo ejercicioCooperativoGuia4
/// Definir tablero como Cadena
/// Dimension tablero[9, 12]
/// inicializarMatriz(tablero, 9, 12)
/// agregarPalabra(tablero, "vector", 0)
/// agregarPalabra(tablero, "matrix", 1)
/// agregarPalabra(tablero, "programa", 2)
/// agregarPalabra(tablero, "subprograma", 3)
/// agregarPalabra(tablero, "subproceso", 4)
/// agregarPalabra(tablero, "variable", 5)
/// agregarPalabra(tablero, "entero", 6)
/// agregarPalabra(tablero, "para", 7)
/// agregarPalabra(tablero, "mientras", 8)
/// acomodarPalabras(tablero)
/// imprimirMatriz(tablero, 9, 12)
/// FinAlgoritmo

Algoritmo ejercicioCooperativoGuia5
	
	Definir tablero Como Cadena
	Dimension tablero[9, 12]
	
	inicializarMatriz(tablero, 9, 12)
	
	Escribir "------------------------------------"
	agregarPalabra(tablero, "VECTOR", 0)         
	agregarPalabra(tablero, "MATRIX", 1)
	agregarPalabra(tablero, "PROGRAMA", 2)
	agregarPalabra(tablero, "SUBPROGRAMA", 3)
	agregarPalabra(tablero, "SUBPROCESO", 4)
	agregarPalabra(tablero, "VARIABLE", 5)
	agregarPalabra(tablero, "ENTERO", 6)
	agregarPalabra(tablero, "PARA", 7)
	agregarPalabra(tablero, "MIENTRAS", 8)
	acomodarPalabras(tablero)
	imprimirMatriz(tablero, 9, 12)
	Escribir "------------------------------------"
	
FinAlgoritmo

// Inicializo la matriz con la cantidad de filas y columnas.
// Coloco "*" en cada lugar para que la matriz no esté vacía.

SubProceso inicializarMatriz(tablero,i,j)
	
	Para i = 0 Hasta 8 Con Paso 1	Hacer
		Para j = 0 Hasta 11 hacer
			tablero[i,j] = "*"			
		FinPara			
	FinPara
	
FinSubProceso

// Muestro la cantidad de filas y columnas y las letras las separo con un espacio, para su impresión.

subProceso imprimirMatriz(tablero, i, j)
	
	Para i = 0 Hasta 8 Hacer
		Para j = 0 Hasta 11 Hacer
			Escribir Sin Saltar " " tablero(i,j) " "
		FinPara
		Escribir ""
	FinPara
	
FinSubProceso

// Indico los parámetros de la matriz donde se va a agregar la palabra, la fila en la que se
// agregará y la propia palabra. Una vez el subprograma la reciba descompone la palabra y la agrega en la posición deseada.

SubProceso agregarPalabra(tablero, palabra, pos)
	
	Definir j Como Entero
	
	Para j = 0 Hasta Longitud(palabra) - 1 Hacer
		tablero(pos,j) = SubCadena(Mayusculas(palabra),j,j)
	Fin Para
	
FinSubProceso

// Pido a la matriz donde se buscará la letra R y el número de la fila en el que buscar.
// Comparo cada letra de la fila hasta que encuentre la primera letra "R" y la devuelve.

Funcion retorno = buscarR(tablero,i)
	
	Definir pos, letra, retorno Como Entero
	
	Para letra = i Hasta 8 Hacer
		Para pos = 0 Hasta 11 Hacer
			Si tablero(i,pos) = "R" O tablero(i,pos) = "r"
				retorno = pos
				pos = 12
				letra = 9
			FinSi
		FinPara
	FinPara
	
FinFuncion

// Luego pido a la matriz que acomode las palabras. Moviendo las palabras de las filas.
// Llamo a buscarR para saber cuántos espacios hay que mover las palabras y lleno los espacios con asteriscos.
// Si la palabra se mueve dos posiciones a la derecha agrego dos asteriscos a la izquierda de la fila.
// NOTA: La primera letra "R" debe quedar en la posición 5 de la matriz.

SubProceso acomodarPalabras(tablero)
	
	Definir i, j, mover Como Entero
	
	Para i = 0 Hasta 8 Hacer
		mover = 5 - buscarR(tablero,i)
		
		Para j = 11 Hasta mover Hacer
			tablero[i,j] = tablero[i,j - mover]
		FinPara
		
		Si mover > 0
			Para j = 0 Hasta mover - 1 Hacer
				tablero[i,j] = "*"
			FinPara
		FinSi
	FinPara
	
FinSubProceso
